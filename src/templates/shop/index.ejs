<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dice Shop</title>

  <style>
    /* 1) Full-screen felt background */
    html, body {
      margin: 0; 
      padding: 0; 
      height: 100%;

      /* Use your felt image path here. Adjust if your file is named differently. */
      background: url("/assets/images/felt_image.jpg") no-repeat center center fixed;
      background-size: cover;
    }

    /* 2) Container with relative positioning so absolute buttons can be placed within it */
    #diceContainer {
      position: relative;
      width: 80%;
      max-width: 1200px;
      height: 70vh;  /* or a fixed px height if you prefer */
      margin: 60px auto; /* center on page with some top space */
      /* border: 1px solid #999;  */
      background: transparent; 
    }

    #diceCanvas {
      width: 100%; 
      height: 100%; 
      display: block;
      background: transparent; /* so we see the felt image behind the 3D scene */
    }

    /* 3) A shared style for all dice buttons */
    .dice-button {
      position: absolute;
      display: none; /* start hidden; we reveal it if the front face is a product face */
      background: #000;   /* black button */
      color: #fff;        /* white text */
      padding: 6px 12px;
      border: none;
      border-radius: 4px;
      font-family: sans-serif;
      font-size: 14px;
      text-align: center;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <section id="diceContainer">
    <canvas id="diceCanvas"></canvas>
    
    <!-- 4 absolutely positioned buttons, one for each die -->
    <button id="addToCartButton1" class="dice-button">Add to Cart</button>
    <button id="addToCartButton2" class="dice-button">Add to Cart</button>
    <button id="addToCartButton3" class="dice-button">Add to Cart</button>
    <button id="addToCartButton4" class="dice-button">Add to Cart</button>
  </section>

  <!-- Include Three.js and GSAP from CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>

  <script>
  /************************************************************
   * 1) Basic Scene & Camera Setup
   ************************************************************/
  const container = document.getElementById('diceContainer');
  const canvas = document.getElementById('diceCanvas');

  const scene = new THREE.Scene();

  const camera = new THREE.PerspectiveCamera(
    45,
    container.clientWidth / container.clientHeight,
    0.1,
    1000
  );
  camera.position.set(0, 0, 36);

  const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
    antialias: true,
    alpha: true
  });
  renderer.setSize(container.clientWidth, container.clientHeight);
  renderer.setPixelRatio(window.devicePixelRatio);

  function onWindowResize() {
    const w = container.clientWidth;
    const h = container.clientHeight;
    camera.aspect = w / h;
    camera.updateProjectionMatrix();
    renderer.setSize(w, h);
  }
  window.addEventListener('resize', onWindowResize);
  onWindowResize();

  // Lighting
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
  scene.add(ambientLight);
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
  directionalLight.position.set(0, 1, 1);
  scene.add(directionalLight);

  /************************************************************
   * 2) Create a Basic Box "Dice" with 6 Textures
   ************************************************************/
  function createDiceWithImages(faceUrls, size = 10) {
    if (faceUrls.length !== 6) {
      console.warn("Need 6 images for 6 faces:", faceUrls);
    }
    const loader = new THREE.TextureLoader();
    const materials = faceUrls.map(url => {
      return new THREE.MeshPhongMaterial({ map: loader.load(url) });
    });

    const geometry = new THREE.BoxGeometry(size, size, size);
    geometry.computeFaceNormals();
    geometry.computeVertexNormals();

    const dice = new THREE.Mesh(geometry, materials);

    // Optional edges
    const edges = new THREE.EdgesGeometry(geometry);
    const lineMat = new THREE.LineBasicMaterial({ color: 0x000000 });
    const edgeLines = new THREE.LineSegments(edges, lineMat);
    dice.add(edgeLines);

    return dice;
  }

  /************************************************************
   * 3) Helper: figure out which face is front given rotation.y
   *    For BoxGeometry: faces [4,0,5,1] as Y-rot goes 0, 90,180,270
   ************************************************************/
  function getFrontFaceIndex(rotY) {
    // Convert rotation to quarter-turn 0..3
    let quarterTurns = Math.round(rotY / (Math.PI / 2)) % 4;
    if (quarterTurns < 0) quarterTurns += 4;
    // faceCycle = [ +Z(4), +X(0), -Z(5), -X(1) ]
    const faceCycle = [4, 0, 5, 1];
    return faceCycle[quarterTurns];
  }

  /************************************************************
   * 4) Create Four Dice
   *    We'll assume face #4 (+Z) is the product face for each
   *    local anchor => near bottom center => (0, -4, +5)
   ************************************************************/
  const diceFaceUrls = [
    '/assets/images/dice/dice-one.png',
    '/assets/images/dice/dice-two.png',
    '/assets/images/dice/dice-three.png',
    '/assets/images/dice/dice-four.png',
    '/assets/images/dice/dice-five.png',
    '/assets/images/dice/dice-six.png'
  ];

  function createDiceData(buttonId) {
    const dice = createDiceWithImages(diceFaceUrls, 10);
    // We'll store a userData object with productFace=4, productAnchor near bottom
    const anchor = new THREE.Vector3(0, -4, 5); // local coords
    dice.userData = {
      buttonId: buttonId,
      rotationTween: null,
      targetRotation: 0,
      productFace: 4,   
      productAnchor: anchor
    };
    return dice;
  }

  const dice1 = createDiceData("addToCartButton1");
  dice1.position.set(-7, 7, 0);
  scene.add(dice1);

  const dice2 = createDiceData("addToCartButton2");
  dice2.position.set(7, 7, 0);
  scene.add(dice2);

  const dice3 = createDiceData("addToCartButton3");
  dice3.position.set(-7, -7, 0);
  scene.add(dice3);

  const dice4 = createDiceData("addToCartButton4");
  dice4.position.set(7, -7, 0);
  scene.add(dice4);

  const diceArray = [dice1, dice2, dice3, dice4];

  /************************************************************
   * 5) Raycaster => rotate on click by 90Â° around Y
   ************************************************************/
  const raycaster = new THREE.Raycaster();
  const mouse = new THREE.Vector2();

  canvas.addEventListener('click', (event) => {
    const rect = canvas.getBoundingClientRect();
    mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
    mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

    raycaster.setFromCamera(mouse, camera);
    const intersects = raycaster.intersectObjects(diceArray);

    if (intersects.length > 0) {
      const clickedDice = intersects[0].object;

      if (clickedDice.userData.targetRotation === undefined) {
        clickedDice.userData.targetRotation = clickedDice.rotation.y;
      }
      clickedDice.userData.targetRotation += Math.PI / 2;

      // kill existing tween if any
      if (clickedDice.userData.rotationTween) {
        clickedDice.userData.rotationTween.kill();
      }

      const remaining = clickedDice.userData.targetRotation - clickedDice.rotation.y;
      const duration = Math.abs(remaining) / (Math.PI / 2);

      // Rotate, updating the button position during animation
      clickedDice.userData.rotationTween = gsap.to(clickedDice.rotation, {
        duration: duration,
        y: clickedDice.userData.targetRotation,
        ease: "power2.out",
        onUpdate: () => {
          updateDiceButtonPosition(clickedDice);
        },
        onComplete: () => {
          updateDiceButtonPosition(clickedDice);
          clickedDice.userData.rotationTween = null;
        }
      });
    }
  });

  /************************************************************
   * 6) updateDiceButtonPosition(dice):
   *    if frontFace=productFace => project anchor => show button
   *    else hide
   *    Move the button up a bit by adjusting anchor or top
   ************************************************************/
  function updateDiceButtonPosition(dice) {
    const btn = document.getElementById(dice.userData.buttonId);
    if (!btn) return;

    // Which face is front?
    const frontFaceIndex = getFrontFaceIndex(dice.rotation.y);
    if (frontFaceIndex !== dice.userData.productFace) {
      // Not the product face => hide button
      btn.style.display = 'none';
      return;
    }

    // It's the product face => show
    btn.style.display = 'block';

    // Project the local anchor
    const anchorLocal = dice.userData.productAnchor; 
    const worldPos = dice.localToWorld(anchorLocal.clone());
    const screenPos = worldPos.clone();
    screenPos.project(camera);

    const w = container.clientWidth;
    const h = container.clientHeight;
    const x = (screenPos.x + 1) / 2 * w;
    const y = (-screenPos.y + 1) / 2 * h;

    // Position the button
    const rect = btn.getBoundingClientRect();
    const bw = rect.width;
    const bh = rect.height;
    // Subtract half the button's width/height so it's centered on the anchor
    // Optionally move it up by 10px more
    btn.style.left = (x - bw/2) + 'px';
    btn.style.top  = (y - bh/2 - 10) + 'px'; 
  }

  /************************************************************
   * 7) Button Click => "Add to Cart"
   ************************************************************/
  const btnIds = ["addToCartButton1","addToCartButton2","addToCartButton3","addToCartButton4"];
  btnIds.forEach(id => {
    const b = document.getElementById(id);
    b.addEventListener('click', (evt) => {
      evt.stopPropagation();
      alert(`Added item for ${id} to the cart!`);
    });
  });

  /************************************************************
   * 8) Animate + Show Buttons If Starting on Product Face
   *    We call updateDiceButtonPosition on each dice initially
   ************************************************************/
  function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  animate();

  // If a die starts on face #4, show button from the start
  diceArray.forEach(d => {
    updateDiceButtonPosition(d);
  });
  </script>
</body>
</html>
