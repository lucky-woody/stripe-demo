<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dice Shop with Random Rotations & Click-Me Button</title>

  <style>
    /* Full-screen felt background or solid color */
    html, body {
      margin: 0; 
      padding: 0; 
      height: 100%;
      background: url("/assets/images/felt_image.jpg") no-repeat center center fixed;
      background-size: cover;
    }

    /* Container holds canvas + absolutely positioned buttons */
    #diceContainer {
      position: relative;
      width: 80%;
      max-width: 1200px;
      height: 70vh;  
      margin: 60px auto;
      border: 1px solid #999; 
      background: transparent; 
    }
    #diceCanvas {
      width: 100%; 
      height: 100%; 
      display: block;
      background: transparent;
    }

    /* Shared button styles */
    .dice-button {
      position: absolute;
      display: none;
      background: #000;
      color: #fff;
      padding: 6px 12px;
      border: none;
      border-radius: 4px;
      font-family: sans-serif;
      font-size: 14px;
      text-align: center;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <section id="diceContainer">
    <canvas id="diceCanvas"></canvas>

    <!-- Four "Add to Cart" buttons, one per die -->
    <button id="addToCartButton1" class="dice-button">Add to Cart</button>
    <button id="addToCartButton2" class="dice-button">Add to Cart</button>
    <button id="addToCartButton3" class="dice-button">Add to Cart</button>
    <button id="addToCartButton4" class="dice-button">Add to Cart</button>

    <!-- One special "Click Me" button just for Die #1 -->
    <button id="clickMeButton1" class="dice-button">Click Me</button>
  </section>

  <!-- Three.js and GSAP from CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>

  <script>
  /************************************************************
   * Global Setup & Variables
   ************************************************************/
  let autoRotationActive = false; // We'll set to true after first user click
  let autoRotationInterval = null; 
  let hoveredDie = null;          // Which die is currently hovered (if any)

  const container = document.getElementById('diceContainer');
  const canvas = document.getElementById('diceCanvas');
  const scene = new THREE.Scene();

  const camera = new THREE.PerspectiveCamera(
    45,
    container.clientWidth / container.clientHeight,
    0.1,
    1000
  );
  camera.position.set(0, 0, 36);

  const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
    antialias: true,
    alpha: true
  });
  renderer.setSize(container.clientWidth, container.clientHeight);
  renderer.setPixelRatio(window.devicePixelRatio);

  function onWindowResize() {
    const w = container.clientWidth;
    const h = container.clientHeight;
    camera.aspect = w / h;
    camera.updateProjectionMatrix();
    renderer.setSize(w, h);
  }
  window.addEventListener('resize', onWindowResize);
  onWindowResize();

  // Lighting
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
  scene.add(ambientLight);
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
  directionalLight.position.set(0, 1, 1);
  scene.add(directionalLight);

  const raycaster = new THREE.Raycaster();
  const mouse = new THREE.Vector2();

  /************************************************************
   * 1) Basic Box "Dice" with 6 Textures
   ************************************************************/
  function createDiceWithImages(faceUrls, size = 10) {
    if (faceUrls.length !== 6) {
      console.warn("Need 6 images for 6 faces:", faceUrls);
    }
    const loader = new THREE.TextureLoader();
    const materials = faceUrls.map(url => {
      return new THREE.MeshPhongMaterial({ map: loader.load(url) });
    });

    const geometry = new THREE.BoxGeometry(size, size, size);
    geometry.computeFaceNormals();
    geometry.computeVertexNormals();

    const dice = new THREE.Mesh(geometry, materials);

    // Optional edges
    const edges = new THREE.EdgesGeometry(geometry);
    const lineMat = new THREE.LineBasicMaterial({ color: 0x000000 });
    const edgeLines = new THREE.LineSegments(edges, lineMat);
    dice.add(edgeLines);

    return dice;
  }

  /************************************************************
   * 2) getFrontFaceIndex(rotY)
   ************************************************************/
  function getFrontFaceIndex(rotY) {
    let quarterTurns = Math.round(rotY / (Math.PI / 2)) % 4;
    if (quarterTurns < 0) quarterTurns += 4;
    const faceCycle = [4, 0, 5, 1];
    return faceCycle[quarterTurns];
  }

  /************************************************************
   * 3) We'll have "productFace" = 4, two anchors for Die #1
   *    'clickMeUsed' => once the user clicks "Click Me", we never show it again
   ************************************************************/
  const diceFaceUrls = [
    '/assets/images/dice/dice-one.png',
    '/assets/images/dice/dice-two.png',
    '/assets/images/dice/dice-three.png',
    '/assets/images/dice/dice-four.png',
    '/assets/images/dice/dice-five.png',
    '/assets/images/dice/dice-six.png'
  ];

  function createDiceData(buttonId, clickMeButtonId=null) {
    const dice = createDiceWithImages(diceFaceUrls, 10);
    const productAnchor = new THREE.Vector3(0, -4, 5); // near bottom
    // Move the "Click Me" anchor downward => y=2
    const clickMeAnchor = new THREE.Vector3(0, 3.5, 5); 

    dice.userData = {
      productFace: 4,
      productAnchor: productAnchor,
      buttonId: buttonId,        // for "Add to Cart"
      
      clickMeFace: 4,            // show "Click Me" if front face is #4
      clickMeAnchor: clickMeAnchor,
      clickMeButtonId: clickMeButtonId,
      clickMeUsed: false,        // once the user clicks "Click Me," we'll never show it again

      rotationTween: null,
      targetRotation: 0
    };
    return dice;
  }

  // Die #1: top-left with a "Click Me" button
  const dice1 = createDiceData("addToCartButton1", "clickMeButton1");
  dice1.position.set(-7, 7, 0);
  scene.add(dice1);

  // Die #2: top-right
  const dice2 = createDiceData("addToCartButton2");
  dice2.position.set(7, 7, 0);
  scene.add(dice2);

  // Die #3: bottom-left
  const dice3 = createDiceData("addToCartButton3");
  dice3.position.set(-7, -7, 0);
  scene.add(dice3);

  // Die #4: bottom-right
  const dice4 = createDiceData("addToCartButton4");
  dice4.position.set(7, -7, 0);
  scene.add(dice4);

  const diceArray = [dice1, dice2, dice3, dice4];

  /************************************************************
   * 4) Hover detection
   ************************************************************/
  function checkHover(event) {
    const rect = canvas.getBoundingClientRect();
    mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
    mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

    raycaster.setFromCamera(mouse, camera);
    const intersects = raycaster.intersectObjects(diceArray);

    if (intersects.length > 0) {
      hoveredDie = intersects[0].object;
    } else {
      hoveredDie = null;
    }
  }
  canvas.addEventListener('mousemove', checkHover);

  /************************************************************
   * 5) rotateDice(die, quarterTurns=1)
   ************************************************************/
  function rotateDice(die, quarterTurns = 1) {
    if (die.userData.targetRotation === undefined) {
      die.userData.targetRotation = die.rotation.y;
    }
    const angleIncrement = quarterTurns * (Math.PI / 2);
    die.userData.targetRotation += angleIncrement;

    if (die.userData.rotationTween) {
      die.userData.rotationTween.kill();
    }

    const remaining = die.userData.targetRotation - die.rotation.y;
    const duration = Math.abs(remaining) / (Math.PI / 2);

    die.userData.rotationTween = gsap.to(die.rotation, {
      duration: duration,
      y: die.userData.targetRotation,
      ease: "power2.out",
      onUpdate: () => {
        updateButtonsPosition(die);
      },
      onComplete: () => {
        updateButtonsPosition(die);
        die.userData.rotationTween = null;
      }
    });
  }

  /************************************************************
   * 6) onClick => rotate clicked die by 90Â°,
   *    if autoRotation not active, start it
   ************************************************************/
  canvas.addEventListener('click', (event) => {
    checkHover(event); 
    if (!hoveredDie) return;

    rotateDice(hoveredDie, 1);

    // If this is the first click in the entire scene, start auto-rotation
    if (!autoRotationActive) {
      autoRotationActive = true;
      startAutoRotation();
    }
  });

  /************************************************************
   * 7) updateButtonsPosition(die)
   ************************************************************/
  function updateButtonsPosition(die) {
    const frontFaceIndex = getFrontFaceIndex(die.rotation.y);

    // 7.1) Product button
    const productBtn = document.getElementById(die.userData.buttonId);
    if (productBtn) {
      if (frontFaceIndex === die.userData.productFace) {
        productBtn.style.display = 'block';
        projectAnchor(die, die.userData.productAnchor, productBtn, -10); 
      } else {
        productBtn.style.display = 'none';
      }
    }

    // 7.2) "Click Me" button (only for dice1) => skip if used
    if (die.userData.clickMeButtonId) {
      const clickBtn = document.getElementById(die.userData.clickMeButtonId);
      if (clickBtn) {
        // If user already clicked "Click Me," we don't show it again
        if (die.userData.clickMeUsed) {
          clickBtn.style.display = 'none';
          return;
        }

        if (frontFaceIndex === die.userData.clickMeFace) {
          clickBtn.style.display = 'block';
          // move it downward a bit
          projectAnchor(die, die.userData.clickMeAnchor, clickBtn, 0);
        } else {
          clickBtn.style.display = 'none';
        }
      }
    }
  }

  /************************************************************
   * 8) projectAnchor(die, localAnchor, button, extraOffsetY=0)
   ************************************************************/
  function projectAnchor(die, localAnchor, button, extraOffsetY=0) {
    const worldPos = die.localToWorld(localAnchor.clone());
    const screenPos = worldPos.clone();
    screenPos.project(camera);

    const w = container.clientWidth;
    const h = container.clientHeight;
    const x = (screenPos.x + 1) / 2 * w;
    const y = (-screenPos.y + 1) / 2 * h;

    const rect = button.getBoundingClientRect();
    const bw = rect.width;
    const bh = rect.height;

    button.style.left = (x - bw/2) + 'px';
    button.style.top  = (y - bh/2 + extraOffsetY) + 'px';
  }

  /************************************************************
   * 9) startAutoRotation() => every 7 seconds
   ************************************************************/
  function startAutoRotation() {
    autoRotationInterval = setInterval(() => {
      // pick a random die
      const randomIndex = Math.floor(Math.random() * diceArray.length);
      const chosenDie = diceArray[randomIndex];

      // If that die is hovered, skip
      if (chosenDie === hoveredDie) {
        console.log("Skipped auto-rotate because chosen die is hovered.");
        return;
      }

      // random quarter-turns: 1..3
      const randomQuarterTurns = Math.floor(Math.random() * 3) + 1;
      rotateDice(chosenDie, randomQuarterTurns);
    }, 7000);
  }

  /************************************************************
   * 10) Button Listeners
   *    - Add to Cart
   *    - "Click Me" => rotates dice1, hides button forever
   ************************************************************/
  // Add to Cart
  ["addToCartButton1","addToCartButton2","addToCartButton3","addToCartButton4"].forEach(id => {
    const b = document.getElementById(id);
    b.addEventListener('click', (evt) => {
      evt.stopPropagation();
      // no alert, no immediate action
    });
  });

  // "Click Me" on Die #1
  const clickMeBtn = document.getElementById("clickMeButton1");
  clickMeBtn.addEventListener("click", (evt) => {
    evt.stopPropagation();
    
    // Spin die1 by 90Â°
    rotateDice(dice1, 1);

    // Mark clickMeUsed => ensures it never reappears
    dice1.userData.clickMeUsed = true;

    // Possibly start auto-rotation if not active
    if (!autoRotationActive) {
      autoRotationActive = true;
      startAutoRotation();
    }
    // We do NOT show an alert or anything.
  });

  /************************************************************
   * 11) Animate + Initial Button Position
   ************************************************************/
  function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }
  animate();

  // Position all buttons from the start
  diceArray.forEach(die => {
    updateButtonsPosition(die);
  });
  </script>

</body>
</html>
